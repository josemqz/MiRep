#lang racket

(define biseccion
  (lambda (func intervalo iter)
    (if (eq? 0 iter)
        null
        (
         (if (< 0 (* func (car intervalo) func (car (cdr intervalo))))
             (display "intervalo incorrecto")
             (
               (let ((mit (/ (- (car intervalo) (car (cdr intervalo))) 2)) (neg 0) (pos 0))
                 (cond
                   ((> 0 func (car intervalo)) (set! neg (car intervalo)) (set! pos (car (cdr intervalo))))
                   ((else (set! pos (car intervalo)) (set! neg (car (cdr intervalo))))
                 (cond
                   ((eq? 0 (func mit)) mit)
                   ((< 0 (func mit)) ;mitad positiva
                     (if (< mit neg)
                         (biseccion func (mit neg) (- iter 1))
                         (biseccion func (neg mit) (- iter 1))
                   ))
                   (else
                     (if (< mit pos)
                         (biseccion func (mit pos) (- iter 1))
                         (biseccion func (pos mit) (- iter 1))
                   ))